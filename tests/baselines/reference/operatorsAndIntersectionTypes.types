=== tests/cases/conformance/types/intersection/operatorsAndIntersectionTypes.ts ===
type Guid = string & { $Guid };          // Tagged string type
>Guid : string & { $Guid: any; }
>$Guid : any

type SerialNo = number & { $SerialNo };  // Tagged number type
>SerialNo : number & { $SerialNo: any; }
>$SerialNo : any

function createGuid() {
>createGuid : () => string & { $Guid: any; }

    return "21EC2020-3AEA-4069-A2DD-08002B30309D" as Guid;
>"21EC2020-3AEA-4069-A2DD-08002B30309D" as Guid : string & { $Guid: any; }
>"21EC2020-3AEA-4069-A2DD-08002B30309D" : string
>Guid : string & { $Guid: any; }
}

function createSerialNo() {
>createSerialNo : () => number & { $SerialNo: any; }

    return 12345 as SerialNo;
>12345 as SerialNo : number & { $SerialNo: any; }
>12345 : number
>SerialNo : number & { $SerialNo: any; }
}

let map1: { [x: string]: number } = {};
>map1 : { [x: string]: number; }
>x : string
>{} : {}

let guid = createGuid();
>guid : string & { $Guid: any; }
>createGuid() : string & { $Guid: any; }
>createGuid : () => string & { $Guid: any; }

map1[guid] = 123;  // Can with tagged string
>map1[guid] = 123 : number
>map1[guid] : number
>map1 : { [x: string]: number; }
>guid : string & { $Guid: any; }
>123 : number

let map2: { [x: number]: string } = {};
>map2 : { [x: number]: string; }
>x : number
>{} : {}

let serialNo = createSerialNo();
>serialNo : number & { $SerialNo: any; }
>createSerialNo() : number & { $SerialNo: any; }
>createSerialNo : () => number & { $SerialNo: any; }

map2[serialNo] = "hello";  // Can index with tagged number
>map2[serialNo] = "hello" : string
>map2[serialNo] : string
>map2 : { [x: number]: string; }
>serialNo : number & { $SerialNo: any; }
>"hello" : string

const s1 = "{" + guid + "}";
>s1 : string
>"{" + guid + "}" : string
>"{" + guid : string
>"{" : string
>guid : string & { $Guid: any; }
>"}" : string

const s2 = guid.toLowerCase();
>s2 : string
>guid.toLowerCase() : string
>guid.toLowerCase : () => string
>guid : string & { $Guid: any; }
>toLowerCase : () => string

const s3 = guid + guid;
>s3 : string
>guid + guid : string
>guid : string & { $Guid: any; }
>guid : string & { $Guid: any; }

const s4 = guid + serialNo;
>s4 : string
>guid + serialNo : string
>guid : string & { $Guid: any; }
>serialNo : number & { $SerialNo: any; }

const s5 = serialNo.toPrecision(0);
>s5 : string
>serialNo.toPrecision(0) : string
>serialNo.toPrecision : (precision?: number) => string
>serialNo : number & { $SerialNo: any; }
>toPrecision : (precision?: number) => string
>0 : number

const n1 = serialNo * 3;
>n1 : number
>serialNo * 3 : number
>serialNo : number & { $SerialNo: any; }
>3 : number

const n2 = serialNo + serialNo;
>n2 : number
>serialNo + serialNo : number
>serialNo : number & { $SerialNo: any; }
>serialNo : number & { $SerialNo: any; }

const b1 = guid === "";
>b1 : boolean
>guid === "" : boolean
>guid : string & { $Guid: any; }
>"" : string

const b2 = guid === guid;
>b2 : boolean
>guid === guid : boolean
>guid : string & { $Guid: any; }
>guid : string & { $Guid: any; }

const b3 = serialNo === 0;
>b3 : boolean
>serialNo === 0 : boolean
>serialNo : number & { $SerialNo: any; }
>0 : number

const b4 = serialNo === serialNo;
>b4 : boolean
>serialNo === serialNo : boolean
>serialNo : number & { $SerialNo: any; }
>serialNo : number & { $SerialNo: any; }

